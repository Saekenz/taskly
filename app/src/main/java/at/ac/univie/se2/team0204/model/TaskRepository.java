package at.ac.univie.se2.team0204.model;

import android.util.Log;

import androidx.lifecycle.LiveData;

import java.util.List;

import at.ac.univie.se2.team0204.model.room.Appointment;
import at.ac.univie.se2.team0204.model.room.AppointmentAttachment;
import at.ac.univie.se2.team0204.model.room.AppointmentDao;
import at.ac.univie.se2.team0204.model.room.AppointmentWithAttachments;
import at.ac.univie.se2.team0204.model.room.Attachment;
import at.ac.univie.se2.team0204.model.room.AttachmentDao;
import at.ac.univie.se2.team0204.model.room.Task;
import at.ac.univie.se2.team0204.model.room.TaskDao;
import at.ac.univie.se2.team0204.model.room.TaskDatabase;
import at.ac.univie.se2.team0204.model.room.ToDoDao;
import at.ac.univie.se2.team0204.model.room.Todo;
import at.ac.univie.se2.team0204.model.room.TodoAttachment;
import at.ac.univie.se2.team0204.model.room.TodoWithAttachments;
import at.ac.univie.se2.team0204.model.room.TodoWithSubTodos;

public class TaskRepository {

    /**
     * Tag used by the logger to identify this class.
     */
    private static final String TAG = "TaskRepository";

    /**
     * The {@link ToDoDao} object of the table {@link Todo}.
     */
    private final ToDoDao toDoDao;

    /**
     * The {@link AppointmentDao} object of the table {@link Appointment}.
     */
    private final AppointmentDao appointmentDao;

    /**
     * The {@link AttachmentDao} object for the table {@link Attachment}.
     */
    private final AttachmentDao attachmentDao;

    private List<TaskDao> taskDaos;
    private TaskListProxy tasklist;

    /**
     * Data stored and retrieved from the {@link Todo} table.
     */
    public LiveData<List<Todo>> toDoLiveData;

    /**
     * Data stored and retrieved from the {@link Appointment} table.
     */
    public LiveData<List<Appointment>> appointmentLiveData;

    /**
     * Creates a new TaskRepository and all its Dao objects.
     * @param toDoDao Object granting access to the {@link Todo} table.
     * @param appointmentDao Object granting access to the {@link Appointment} table.
     * @param attachmentDao Object granting access to the {@link Attachment} table.
     */
    public TaskRepository(ToDoDao toDoDao, AppointmentDao appointmentDao, AttachmentDao attachmentDao) {
        this.toDoDao = toDoDao;
        this.appointmentDao = appointmentDao;
        this.attachmentDao = attachmentDao;

        toDoLiveData = toDoDao.getAll();
        appointmentLiveData = appointmentDao.getAll();
        /*
        taskDaos=new ArrayList<>();
        taskDaos.add(toDoDao);
        taskDaos.add(appointmentDao);
        tasklist=new TaskListProxy(taskDaos);
         */
    }

    /**
     * Inserts a new {@link Todo} into the database.
     * @param taskTodo The object that should be inserted into the database.
     */
    public void insertTodo(Todo taskTodo) {
        Log.i(TAG, "Inserting Todo into DB");
        TaskDatabase.databaseWriteExecutor.execute(() -> toDoDao.insert(taskTodo));
    }

    /**
     * Inserts a new {@link Todo} into the database and returns the autogenerated ID.
     * @param taskTodo The object that should be inserted into the database.
     * @return The autogenerated ID of the inserted object.
     */
    public long insertTodoAndReturnID(Todo taskTodo) {
        long id = toDoDao.insertAndReturnID(taskTodo);
        Log.i(TAG, "Inserted Todo with ID: "+id);
        return id;
    }

    /**
     * Inserts a new {@link Appointment} into the database.
     * @param appointment The object that should be inserted into the database.
     */
    public void insertAppointment(Appointment appointment) {
        Log.i(TAG, "Inserting Appointment into DB");
        TaskDatabase.databaseWriteExecutor.execute(() -> appointmentDao.insert(appointment));
    }

    /**
     * Inserts a new {@link Appointment} into the database and returns the autogenerated ID.
     * @param appointment The object that should be inserted into the database.
     * @return The autogenerated ID of the inserted object.
     */
    public long insertAppointmentAndReturnID(Appointment appointment) {
        long id = appointmentDao.insertAndReturnID(appointment);
        Log.i(TAG, "Inserted Appointment with ID: "+id);
        return id;
    }

    /**
     * Returns an {@link Appointment} identified by its id, if it exists.
     * @param taskId The id used to identify the right task.
     * @return The {@link Appointment} identified by the id.
     */
    public Appointment getAppointment(String taskId) {

        return this.appointmentDao.getAppointment(taskId);
    }

    /**
     * Returns a {@link Todo} identified by its id, if it exists.
     * @param taskId The id used to identify the right {@link Todo}.
     * @return The {@link Todo} identified by the id.
     */
    public Todo getTodo(String taskId) {
        return this.toDoDao.getTodo(taskId);
    }

    /**
     * Updates a {@link Todo} to the database.
     * @param task The {@link Todo} that will be updated.
     */
    public void updateTodo(Todo task) {
        this.toDoDao.updateTodo(task);
    }

    /**
     * Updates an {@link Appointment} to the database.
     * @param appointment The {@link Appointment} that will be updated.
     */
    public void updateAppointment(Appointment appointment) {
        this.appointmentDao.updateAppointment(appointment);
    }

    /**
     * Inserts an {@link Attachment} into the DB.
     * @param attachment The {@link Attachment} to be inserted into the DB.
     * @return The RowID of the inserted {@link Attachment} (-1 if already exists).
     */
    public long insertAttachment(Attachment attachment) {
        return attachmentDao.insert(attachment);
    }

    /**
     * Inserts a {@link TodoAttachment} object (consisting of taskId & attachmentID) into the DB.
     * @param todoAttachment The to be inserted object.
     * @return The RowID of the inserted {@link TodoAttachment} (-1 if already exists).
     */
    public long insertTodoAttachment(TodoAttachment todoAttachment) {
        return attachmentDao.insertTodoAttachment(todoAttachment);
    }

    /**
     * Inserts an {@link AppointmentAttachment} object (consisting of taskId & attachmentID) into the DB.
     * @param appointmentAttachment The to be inserted object.
     * @return The RowID of the inserted {@link AppointmentAttachment} (-1 if already exists).
     */
    public long insertAppointmentAttachment(AppointmentAttachment appointmentAttachment) {
        return attachmentDao.insertAppointmentAttachment(appointmentAttachment);
    }

    /**
     * Inserts an {@link Attachment} into the DB.
     * @param attachment The {@link Attachment} to be inserted into the DB.
     * @return The RowID of the inserted {@link Attachment} (attachmentID if already exists).
     */
    public long insertAttachmentAndGetID(Attachment attachment) {return  attachmentDao.insertAndGetID(attachment); }

    /**
     * Searches for {@link Todo} with specific title and description.
     * @param title Title of the {@link Todo} object.
     * @param desc Description of the {@link Todo} object.
     * @return TaskID of the {@link Todo} object.
     */
    public int getTodoByTitleAndDesc(String title, String desc) { return toDoDao.getTodoByTitleAndDesc(title,desc); }

    /**
     * Fetches a list with all {@link AppointmentWithAttachments} objects from the database.
     * @return List containing every {@link Appointment} and the corresponding {@link Attachment} objects.
     */
    public List<AppointmentWithAttachments> getAppointmentWithAttachments() {
        return appointmentDao.getAppointmentsWithAttachments();
    }

    /**
     * Fetches a list with all {@link TodoWithAttachments} objects from the database.
     * @return List containing every {@link Todo} and the corresponding {@link Attachment} objects.
     */
    public List<TodoWithAttachments> getTodoWithAttachments() {
        return toDoDao.getTodosWithAttachments();
    }

    /**
     * Fetches a {@link TodoWithSubTodos} object containing a {@link Todo} and its children.
     * @param id The taskID of the Parent {@link Todo} object.
     * @return The {@link TodoWithSubTodos} object matching the ID.
     */
    public TodoWithSubTodos getTodoWithSubTodosByID(int id) {
        return toDoDao.getTodoWithSubTodos(id);
    }

    /**
     * Fetches a list with all {@link TodoWithSubTodos} objects from the database.
     * @return List containing every {@link Todo} and its children.
     */
    public List<TodoWithSubTodos> getTodosWithSubTodos() {
        return toDoDao.getTodosWithSubTodos();
    }

    /**
     * Deletes the {@link Todo} object matching the id parameter and all its children from the database.
     * @param id The taskId of the to be deleted {@link Todo} object.
     */
    public void deleteTodoAndSubTodosById(int id) {
        toDoDao.deleteTodoAndSubTodosById(id);
    }

    public Todo getTodoByID(int taskID) { return toDoDao.getTodoByID(taskID); }

    public void insert(Task task){
        tasklist.insert(task);
    }

    public void update(Task task){
        tasklist.update(task);
    }

    public void delete(Task task){
        tasklist.delete(task);
    }

    /**
     * Fetches all {@link Appointment} objects in a LiveData object.
     * @return All {@link Appointment} objects.
     */
    public LiveData<List<Appointment>> getAppointments() {
        return this.appointmentLiveData;
    }

    /**
     * Fetches all {@link Todo} objects in a LiveData object.
     * @return All {@link Todo} objects.
     */
    public LiveData<List<Todo>> getTodos() {
        return this.toDoLiveData;
    }

}
